template <class KeyElem, class Data, class Rank>
double AVLTree<KeyElem, Data, Rank>::AvgHighRankRec(Rank m, TNode *current_node, Rank *node_rank, const AVLTree &multiTree) {
    if (*node_rank == m) {  //node has the exact num of players to "fill" m
        /* TNode *multi_node = multiTree.AVLFind(current_node->key);
        Rank multi_rank(multi_node->rank);
        if (multi_node->left_son) {
            multi_rank -= multi_node->left_son->rank;
        } */
        //multiTree.printTreeRank();
        Rank multi_rank = multiTree.FindRank_reverse(current_node->key);
        return double(multi_rank) / double(m);
    } else if (*node_rank < m) {        //not enough players to "fill" m
        if (!current_node->left_son) {  //no left son means lowest level, we dont have enough players in tree
            /* TNode *multi_node = multiTree.AVLFind(current_node->key);
            Rank multi_rank(multi_node->rank);
            if (multi_node->left_son) {
                multi_rank -= multi_node->left_son->rank;
            } */
            Rank multi_rank = multiTree.FindRank_reverse(current_node->key);
            return double(multi_rank) / double(m);
        }
        current_node = current_node->left_son;
        *node_rank += current_node->rank;
        if (current_node->left_son) {
            *node_rank -= current_node->left_son->rank;
        }
        return AvgHighRankRec(m, current_node, node_rank, multiTree);
    } else {                        //more players in level or above than m
        Rank extra = *node_rank - m;  //how many more than m
        Rank this_rank(current_node->rank);
        if (current_node->right_son) {
            this_rank -= current_node->right_son->rank;
        }
        if (current_node->left_son) {
            this_rank -= current_node->left_son->rank;
        }   //!  repeated from above
            
        if (extra > this_rank) {  //if extra is more than players in level, level cant be the one to "fill" m
            //current_node = current_node->right_son;   //! --->this is causing bugs if there is no right son
            if(current_node->right_son){
                *node_rank += current_node->right_son->rank;
                if (current_node->right_son->left_son) {
                    *node_rank -= current_node->right_son->left_son->rank;
                }
                return AvgHighRankRec(m, current_node->right_son, node_rank, multiTree);
            }
        }
        //we found the node that "fills" m
        // go to next node, get next node multi, add to extra in this level and devide by m to get avg
        TNode *next_node = current_node->nextInOrder();
        if (!next_node) {
            return double(current_node->key); 
        }
        /* TNode *multi_node = multiTree.AVLFind(next_node->key);
        Rank multi_rank(multi_node->rank); */
        
        /* if (multi_node->left_son) {
            multi_rank -= multi_node->left_son->rank;
        }  */   
        Rank multi_rank = multiTree.FindRank_reverse(current_node->key);
        
        return double((double(multi_rank) + double((double(extra) * double(current_node->key))) / double(m)));
    }
}
























template <class KeyElem, class Data, class Rank>
void AVLTree<KeyElem, Data, Rank>::AVLRemove_rec(TNode *node, const KeyElem &key) {
    if (!node) {
        return;
    }
    if (node->key == key) {
        auto temp_father = node->father;
        if (!node->leftSonExists() && !node->rightSonExists()) {  //This is a leaf
            if (node == this->root) {
                this->root = nullptr;
            } else if (node->isLeftSon()) {
                AVLRemoveFromFathersRank(node->father, node->rank);
                node->father->left_son = nullptr;
            } else if (node->isRightSon()) {
                AVLRemoveFromFathersRank(node->father, node->rank);
                node->father->right_son = nullptr;
            }
            AVLBalance(temp_father);
            delete node;
            return;
        } else if (!node->leftSonExists() || !node->rightSonExists()) {  //Has only a right son or a left son

            TNode *node_son = node->leftSonExists() ? node->left_son : node->right_son;

            if (node == this->root) {
                this->root = node_son;
            } else if (node->isLeftSon()) {
                node->rank -= node_son->rank;
                AVLRemoveFromFathersRank(node->father, node->rank);

                node->father->left_son = node_son;
            } else if (node->isRightSon()) {
                node->rank -= node_son->rank;
                AVLRemoveFromFathersRank(node->father, node->rank);

                node->father->right_son = node_son;
            }
            node_son->father = node->father;
            AVLBalance(temp_father);
            delete node;
            return;
        } else if (node->leftSonExists() && node->rightSonExists()) {  //Has TWO sons
            // ! update rank in replacer case
            auto replacer = findReplacingNode(node);  //replacer is the biggest node that is smaller than our node

            node->rank -= node->right_son->rank;
            node->rank -= node->left_son->rank;
            if (replacer->left_son) {
                node->rank += replacer->left_son->rank;
                replacer->rank -= replacer->left_son->rank;
            }

            if (node == this->root) {
                this->root = replacer;
            } else if (node->isLeftSon()) {
                node->father->left_son = replacer;
            } else if (node->isRightSon()) {
                node->father->right_son = replacer;
            }

            TNode *temp_node_left_son = node->left_son;
            TNode *temp_node_right_son = node->right_son;
            TNode *temp_replacer_left_son = replacer->left_son;

            if (node == replacer->father) {  // special case. They are direct relatives, and therfore point to eachother

                replacer->father = temp_father;
                node->father = replacer;
                replacer->left_son = node;
                temp_father = node->father;
            } else {
                auto temp_replacer_father = replacer->father;
                replacer->father = node->father;
                node->father = temp_replacer_father;
                replacer->left_son = temp_node_left_son;
            }

            node->left_son = temp_replacer_left_son;
            node->right_son = replacer->right_son;
            replacer->right_son = temp_node_right_son;
            replacer->right_son->father = replacer;
            replacer->left_son->father = replacer;

            replacer->rank += replacer->left_son->rank;
            replacer->rank += replacer->right_son->rank;

            replacer->BF = node->BF;
            replacer->height = node->height;
            AVLNodeRefreshHeight(node);
            AVLNodeRefreshBF(node);

            if (!node->leftSonExists() && !node->rightSonExists()) {  //This is a leaf

                if (node->father == replacer) {
                    AVLRemoveFromFathersRank(node->father, node->rank);
                    node->father->left_son = nullptr;
                } else {
                    AVLRemoveFromFathersRank(node->father, node->rank);
                    node->father->right_son = nullptr;
                }
                AVLBalance(node->father);
                delete node;
                return;
            }
             }
    } else if (node->leftSonExists() && key < node->key) {
        AVLRemove_rec(node->left_son, key);
    } else if (node->rightSonExists() && node->key < key) {
        AVLRemove_rec(node->right_son, key);
    }
}


















            template <class KeyElem, class Data, class Rank>
void AVLTree<KeyElem, Data, Rank>::AVLRemove_rec(TNode *node, const KeyElem &key) {
    if (!node) {
        return;
    }
    if (node->key == key) {
        auto temp_father = node->father;
        if (!node->leftSonExists() && !node->rightSonExists()) {  //This is a leaf
            if (node == this->root) {
                this->root = nullptr;
            } else if (node->isLeftSon()) {
                AVLRemoveFromFathersRank(node->father, node->rank);
                node->father->left_son = nullptr;
            } else if (node->isRightSon()) {
                AVLRemoveFromFathersRank(node->father, node->rank);
                node->father->right_son = nullptr;
            }
            AVLBalance(temp_father);
            delete node;
            return;
        } else if (!node->leftSonExists() || !node->rightSonExists()) {  //Has only a right son or a left son

            TNode *node_son = node->leftSonExists() ? node->left_son : node->right_son;

            if (node == this->root) {
                this->root = node_son;
            } else if (node->isLeftSon()) {
                node->rank -= node_son->rank;
                AVLRemoveFromFathersRank(node->father, node->rank);

                node->father->left_son = node_son;
            } else if (node->isRightSon()) {
                node->rank -= node_son->rank;
                AVLRemoveFromFathersRank(node->father, node->rank);

                node->father->right_son = node_son;
            }
            node_son->father = node->father;
            AVLBalance(temp_father);
            delete node;
            return;
        } else if (node->leftSonExists() && node->rightSonExists()) {  //Has TWO sons
            auto replacer = findReplacingNode(node);  //replacer is the biggest node that is smaller than our node

            Rank node_rank_raw(node->rank);
            node_rank_raw -= node->right_son->rank;
            node_rank_raw -= node->left_son->rank;

            if(replacer->left_son){
                replacer->rank -= replacer->left_son->rank;
            }
            if(replacer->right_son){
                replacer->rank -= replacer->left_son->rank;
            }

            TNode *temp_for_replacer = replacer->father;

            while (temp_for_replacer != node)
            {
                temp_for_replacer->rank -= replacer->rank;
                temp_for_replacer = temp_for_replacer->father;
            }

            if (node == this->root) {
                this->root = replacer;
            } else if (node->isLeftSon()) {
                node->father->left_son = replacer;
            } else if (node->isRightSon()) {
                node->father->right_son = replacer;
            }

            TNode *temp_node_left_son = node->left_son;
            TNode *temp_node_right_son = node->right_son;
            TNode *temp_replacer_left_son = replacer->left_son;

            if (node == replacer->father) {  // special case. They are direct relatives, and therfore point to eachother

                replacer->father = temp_father;
                node->father = replacer;
                replacer->left_son = node;
                temp_father = node->father;
            } else {
                auto temp_replacer_father = replacer->father;
                replacer->father = node->father;
                node->father = temp_replacer_father;
                replacer->left_son = temp_node_left_son;
            }

            node->left_son = temp_replacer_left_son;
            node->right_son = replacer->right_son;
            replacer->right_son = temp_node_right_son;
            replacer->right_son->father = replacer;
            replacer->left_son->father = replacer;

            replacer->BF = node->BF;
            replacer->height = node->height;
            AVLNodeRefreshHeight(node);
            AVLNodeRefreshBF(node);

            if (!node->leftSonExists() && !node->rightSonExists()) {  //This is a leaf

                if (node->father == replacer) {
                    node->father->left_son = nullptr;
                } else {
                    node->father->right_son = nullptr;
                }
                replacer->rank += replacer->left_son->rank;
                replacer->rank += replacer->right_son->rank;
                AVLBalance(node->father);
                delete node;
                return;
            }

            if (!node->leftSonExists() || !node->rightSonExists()) {  //Has only a right son or a left son

                TNode *node_son = node->leftSonExists() ? node->left_son : node->right_son;

                if (node->father == replacer) {
                    node->father->left_son = node_son;
                } else {
                    node->father->right_son = node_son;
                }
                node_son->father = node->father;
                replacer->rank += replacer->left_son->rank;
                replacer->rank += replacer->right_son->rank;
            }
            AVLBalance(node->father);
            delete node;
            return;
        }
    } else if (node->leftSonExists() && key < node->key) {
        AVLRemove_rec(node->left_son, key);
    } else if (node->rightSonExists() && node->key < key) {
        AVLRemove_rec(node->right_son, key);
    }
}